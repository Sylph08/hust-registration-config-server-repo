server:
  port: 9000

spring:
  # rabbitmq:
  #   host: "localhost"
  #   port: 5672
  #   username: "guest"
  #   password: "guest"
  cloud:
    # config routes automatically by connect with the discovery server (Eureka server)
    gateway:
      discovery:
        locator:
          # disable default routing
          enabled: false
          # enable lower case
          lowerCaseServiceId: true
      httpclient:
        connect-timeout: 5000
        response-timeout: 10s
    stream:
      kafka:
        binder:
          brokers:
            - localhost:9092
  # config redis
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s 
  # resource server config
  security:
    oauth2:
      resourceserver:
        jwt:
          # define auth server url where resource server can download the certificates during the startup.
          # Using this public certificate, resource server can validate if a given access token is really issued by the auth server
          # auth server use private certificate to generate and validate access token
          jwk-set-uri: "http://localhost:7080/realms/master/protocol/openid-connect/certs"
      

management:
  endpoints:
    web:
      exposure:
        include: "*"
  # enable releated endpoints of api gateway
  endpoint:
    gateway:
      enabled: true
  info:
    env:
      enabled: true
  metrics:
    # group metric by name
    tags:
      application: ${spring.application.name}      

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

# enable the debugging logging for package com.hust.apigateway, we need to enable to see the log of "logger.debug()"
logging:
  level:
    com:
      hust:
        apigateway: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"        

info:
  app:
    name: "api-gateway"
    description: "Hust API Gateway"
    version: "1.0.0" 

resilience4j.circuitbreaker:
  configs:
    # co the config cho cac circuitbreaker khac bang cach thay "default" bang ten cua chung
    default:
      # how many requests it has to initially monitor before it tries to change the status from close to open
      slidingWindowSize: 10
      # allow 2 request in half open status, Based upon how these two requests are processed, it can decide whether to go back to the open state or move to the closed state
      permittedNumberOfCallsInHalfOpenState: 2
      # if at least 50% of my requests are failed, the state change from close -> open state
      failureRateThreshold: 50
      # need to wait 10s to move from open state to the half open state and allow the partial traffic.
      waitDurationInOpenState: 10000    
