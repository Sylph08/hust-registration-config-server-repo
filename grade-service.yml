server:
  port: 8093

spring:
  # rabbitmq for config server update configuration
  # rabbitmq:
  #   host: "localhost"
  #   port: 5672
  #   username: "guest"
  #   password: "guest"
  datasource:
    url: jdbc:postgresql://localhost:5432/hust_grade_mngt
    username: postgres
    password: admin
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    # hibernate:
    #   ddl-auto: update
    show-sql: true
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
    bus:
      destination: springCloudBus
      # specific binder is kafka or rabbit
      binder: kafka
    function:
      definition: updateCommunication; getResultOfUpdatingAttendantAmount
    stream:
      # with this config we can use rabbitmq for spring cloud bus and kafka for message broker
      defaultBinder: kafka
      bindings:
        updateCommunication-in-0:
          destination: communication-sent
          group: ${spring.application.name}
          binder: kafka
        sendCommunication-out-0:
          # "send-communication" is exchange name
          destination: send-communication
          binder: kafka
        sendAttendantAmount-out-0:
          destination: receive-update-attendant-amount-request
          group: ${spring.application.name}
          binder: kafka
        getResultOfUpdatingAttendantAmount-in-0:
          destination: response-update-attendant-amount-result
          group: ${spring.application.name}
          binder: kafka
      kafka:
        binder:
          brokers:
            - localhost:9092

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true
    shutdown:
      enabled: true
  info:
    env:
      enabled: true
  metrics:
    # group metric by name
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

logging:
  level:
    com:
      hust:
        gradeservice: DEBUG
    org:
      apache:
        kafka: OFF
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 7
      permittedNumberOfCallsInHalfOpenState: 3
      failureRateThreshold: 50
      waitDurationInOpenState: 10000

resilience4j.timelimiter:
  configs:
    default:
      timeoutDuration: 5s

app-configs:
  version: 1.1
